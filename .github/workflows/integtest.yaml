on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}
name: integration tests
jobs:
  list-apps:
    runs-on: ubuntu-latest
    outputs:
      to_test: ${{ steps.find_dirs.outputs.to_test }}
    steps:
      - uses: actions/checkout@v3
      - name: find test dirs
        id: find_dirs
        run: |
          dirs_with_tests="$(
            for d in $(find * -type d -maxdepth 0 || printf ''); do
              TESTABLE_APP=$(jq &>/dev/null -e '.scripts."integ-test"' $d/package.json && echo "$d")
              if grep -s -q "^integ-test:" "${d}/Makefile"; then
                TESTABLE_APP=$d
              fi
              if [[ -n "${TESTABLE_APP}" ]]; then
                echo $TESTABLE_APP
              fi
            done
            exit 0 # otherwise, will fail if the last dir failed the jq match
          )"
          as_json="$(echo "$dirs_with_tests" | jq -c -R --slurp 'split("\n") | map(select(length > 0))')"
          if [[ "$as_json" == '[]' ]]; then
            echo "::error ::No tests found"
            exit 1
          fi
          echo "$as_json" | jq .
          echo "to_test=$as_json" > $GITHUB_OUTPUT

  run-test:
    needs: list-apps
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app_to_test: ${{ fromJson(needs.list-apps.outputs.to_test) }}
    services:
      redis:
        image: redis
        ports:
        - 6379/tcp
        # Set health checks to wait until redis has started, but only for ts-redis or py-redis.
        # ${{ condition && ifTrue || ifFalse }} works as a ternary operator.
        # We always need some valid docker option (even in the false case -- an empty string results in an error),
        # so if this isn't a redis service, just set CPUs to 1 as some arbitrary option.
        options: 
          ${{ contains(fromJson('["ts-redis", "py-redis"]'), matrix.app_to_test)
          && '--health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5'
          || '--cpus 1' }}
    steps:
      - uses: actions/checkout@v3

      - name: get sample app language
        id: get_language
        run: echo language=$(echo "${{ matrix.app_to_test }}" | cut -d "-" -f 1) >> $GITHUB_OUTPUT

      - name: npm install
        if: steps.get_language.outputs.language == 'ts'
        run: npm install
        working-directory: ${{ matrix.app_to_test }}

      - name: tsc
        if: steps.get_language.outputs.language == 'ts'
        run: npx tsc
        working-directory: ${{ matrix.app_to_test }}

      - name: pipenv install
        if: steps.get_language.outputs.language == 'py'
        working-directory: ${{ matrix.app_to_test }}
        run: |
          pip install pipenv
          pipenv install -r requirements.txt

      - name: Test redis cluster
        if: contains(fromJson('["ts-redis-cluster", "py-redis-cluster"]'), matrix.app_to_test)
        uses: vishnudxb/redis-cluster@1.0.5
        with:
          master1-port: 8000
          master2-port: 8001
          master3-port: 8002
          slave1-port: 8003
          slave2-port: 8004
          slave3-port: 8005
           # Running Test
      - name: ping redis cluster
        if: contains(fromJson('["ts-redis-cluster", "py-redis-cluster"]'), matrix.app_to_test)
        run: |
          sudo apt-get install -y redis-tools
          docker ps -a
          redis-cli -h 127.0.0.1 -p 8000 ping
          redis-cli -h 127.0.0.1 -p 8000 cluster nodes
      - name: service start
        id: service-start
        working-directory: ${{ matrix.app_to_test }}
        run: |
          if [[ -f test/integ_test_hooks/localhost-start.sh ]]; then
            cmd='bash test/integ_test_hooks/localhost-start.sh'
          elif [[ "${{ steps.get_language.outputs.language }}" == "ts" ]]; then
            cmd='node dist/index.js'
          else
            cmd='pipenv run make run'
          fi
          echo "Using start command: $cmd"
          $cmd >$RUNNER_TEMP/service.out 2>$RUNNER_TEMP/service.err &
          node_pid=$!
          echo "node-pid=$node_pid" >> $GITHUB_OUTPUT
        env:
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}
      - name: run typescript tests
        if: steps.get_language.outputs.language == 'ts'
        working-directory: ${{ matrix.app_to_test }}
        run: |
          # Note: We shouldn't need a global retry, but we do, due to async sets. See issues #44 and #33.
          INTEG_TEST_ATTEMPTS=3
          for try_num in $(seq $INTEG_TEST_ATTEMPTS); do
            echo "::group::Attempt $try_num"
            if API_ENDPOINT=http://localhost:3000 npm run integ-test ; then
              echo "::notice title=npm run integ-test succeeded::Succeeded on attempt $try_num"
              echo "::endgroup"
              exit
            fi
            sleep 5
            echo "::endgroup"
          done
          echo "::error title=npm run integ-test failed::Failed after $INTEG_TEST_ATTEMPTS attempts"
          exit 1
      - name: run python tests
        if: steps.get_language.outputs.language == 'py'
        working-directory: ${{ matrix.app_to_test }}
        run: |
          # Note: We shouldn't need a global retry, but we do, due to async sets. See issues #44 and #33.
          INTEG_TEST_ATTEMPTS=3
          for try_num in $(seq $INTEG_TEST_ATTEMPTS); do
            echo "::group::Attempt $try_num"
            if API_ENDPOINT=http://localhost:3000 pipenv run make integ-test ; then
              echo "::notice title=make integ-test succeeded::Succeeded on attempt $try_num"
              echo "::endgroup"
              exit
            fi
            sleep 5
            echo "::endgroup"
          done
          echo "::error title=make integ-test failed::Failed after $INTEG_TEST_ATTEMPTS attempts"
          exit 1
      - name: service stop
        if: always() && steps.service-start.outputs.node-pid
        run: kill ${{ steps.service-start.outputs.node-pid }}
      - name: echo service output
        if: always()
        run: |
          echo '::group::stdout'
          cat $RUNNER_TEMP/service.out
          echo '::endgroup'
          echo '::group::stderr'
          cat $RUNNER_TEMP/service.err
          echo '::endgroup'
